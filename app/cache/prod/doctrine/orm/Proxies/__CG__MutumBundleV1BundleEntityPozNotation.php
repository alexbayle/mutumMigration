<?php

namespace Proxies\__CG__\Mutum\Bundle\V1Bundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PozNotation extends \Mutum\Bundle\V1Bundle\Entity\PozNotation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationType', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationDatetime', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationReqId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationUserId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationNoterUserId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationArtId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationTitle', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationText', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationNote');
        }

        return array('__isInitialized__', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationType', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationDatetime', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationReqId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationUserId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationNoterUserId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationArtId', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationTitle', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationText', '' . "\0" . 'Mutum\\Bundle\\V1Bundle\\Entity\\PozNotation' . "\0" . 'notationNote');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PozNotation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getNotationId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getNotationId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationId', array());

        return parent::getNotationId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotationType($notationType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotationType', array($notationType));

        return parent::setNotationType($notationType);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotationType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationType', array());

        return parent::getNotationType();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotationDatetime($notationDatetime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotationDatetime', array($notationDatetime));

        return parent::setNotationDatetime($notationDatetime);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotationDatetime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationDatetime', array());

        return parent::getNotationDatetime();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotationReqId($notationReqId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotationReqId', array($notationReqId));

        return parent::setNotationReqId($notationReqId);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotationReqId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationReqId', array());

        return parent::getNotationReqId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotationUserId($notationUserId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotationUserId', array($notationUserId));

        return parent::setNotationUserId($notationUserId);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotationUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationUserId', array());

        return parent::getNotationUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotationNoterUserId($notationNoterUserId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotationNoterUserId', array($notationNoterUserId));

        return parent::setNotationNoterUserId($notationNoterUserId);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotationNoterUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationNoterUserId', array());

        return parent::getNotationNoterUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotationArtId($notationArtId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotationArtId', array($notationArtId));

        return parent::setNotationArtId($notationArtId);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotationArtId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationArtId', array());

        return parent::getNotationArtId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotationTitle($notationTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotationTitle', array($notationTitle));

        return parent::setNotationTitle($notationTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotationTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationTitle', array());

        return parent::getNotationTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotationText($notationText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotationText', array($notationText));

        return parent::setNotationText($notationText);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotationText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationText', array());

        return parent::getNotationText();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotationNote($notationNote)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotationNote', array($notationNote));

        return parent::setNotationNote($notationNote);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotationNote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotationNote', array());

        return parent::getNotationNote();
    }

}
