<?php

namespace Proxies\__CG__\Mutum\Bundle\V2Bundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Community extends \Mutum\Bundle\V2Bundle\Entity\Community implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commName', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commDesc', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commAddress', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'category', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commType', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commTypeData', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'joinCommunities');
        }

        return array('__isInitialized__', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commName', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commDesc', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commAddress', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'category', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commType', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'commTypeData', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Community' . "\0" . 'joinCommunities');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Community $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getCommId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getCommId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommId', array());

        return parent::getCommId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommName($commName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommName', array($commName));

        return parent::setCommName($commName);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommName', array());

        return parent::getCommName();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommDesc($commDesc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommDesc', array($commDesc));

        return parent::setCommDesc($commDesc);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommDesc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommDesc', array());

        return parent::getCommDesc();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommAddress($commAddress)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommAddress', array($commAddress));

        return parent::setCommAddress($commAddress);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommAddress', array());

        return parent::getCommAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', array());

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', array($category));

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function setCommType($commType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommType', array($commType));

        return parent::setCommType($commType);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommType', array());

        return parent::getCommType();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommTypeData($commTypeData)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommTypeData', array($commTypeData));

        return parent::setCommTypeData($commTypeData);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommTypeData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommTypeData', array());

        return parent::getCommTypeData();
    }

    /**
     * {@inheritDoc}
     */
    public function getJoinCommunities()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJoinCommunities', array());

        return parent::getJoinCommunities();
    }

    /**
     * {@inheritDoc}
     */
    public function setJoinCommunities($joinCommunities)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJoinCommunities', array($joinCommunities));

        return parent::setJoinCommunities($joinCommunities);
    }

    /**
     * {@inheritDoc}
     */
    public function addJoinCommunities(\Mutum\Bundle\V2Bundle\Entity\JoinCommunity $joinCommunity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addJoinCommunities', array($joinCommunity));

        return parent::addJoinCommunities($joinCommunity);
    }

    /**
     * {@inheritDoc}
     */
    public function removeJoinCommunities(\Mutum\Bundle\V2Bundle\Entity\JoinCommunity $joinCommunity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeJoinCommunities', array($joinCommunity));

        return parent::removeJoinCommunities($joinCommunity);
    }

}
