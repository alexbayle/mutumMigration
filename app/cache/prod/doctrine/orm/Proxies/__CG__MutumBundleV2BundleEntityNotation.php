<?php

namespace Proxies\__CG__\Mutum\Bundle\V2Bundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Notation extends \Mutum\Bundle\V2Bundle\Entity\Notation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaUserId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaDestUserId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaProdId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaType', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaDateCreation', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaTitle', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaMessage', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaNote');
        }

        return array('__isInitialized__', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaUserId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaDestUserId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaProdId', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaType', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaDateCreation', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaTitle', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaMessage', '' . "\0" . 'Mutum\\Bundle\\V2Bundle\\Entity\\Notation' . "\0" . 'notaNote');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Notation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getNotaId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getNotaId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotaId', array());

        return parent::getNotaId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotaUserId($notaUserId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotaUserId', array($notaUserId));

        return parent::setNotaUserId($notaUserId);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotaUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotaUserId', array());

        return parent::getNotaUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotaDestUserId($notaDestUserId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotaDestUserId', array($notaDestUserId));

        return parent::setNotaDestUserId($notaDestUserId);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotaDestUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotaDestUserId', array());

        return parent::getNotaDestUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotaProdId($notaProdId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotaProdId', array($notaProdId));

        return parent::setNotaProdId($notaProdId);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotaProdId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotaProdId', array());

        return parent::getNotaProdId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotaType($notaType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotaType', array($notaType));

        return parent::setNotaType($notaType);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotaType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotaType', array());

        return parent::getNotaType();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotaDateCreation($notaDateCreation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotaDateCreation', array($notaDateCreation));

        return parent::setNotaDateCreation($notaDateCreation);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotaDateCreation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotaDateCreation', array());

        return parent::getNotaDateCreation();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotaTitle($notaTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotaTitle', array($notaTitle));

        return parent::setNotaTitle($notaTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotaTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotaTitle', array());

        return parent::getNotaTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotaMessage($notaMessage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotaMessage', array($notaMessage));

        return parent::setNotaMessage($notaMessage);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotaMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotaMessage', array());

        return parent::getNotaMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotaNote($notaNote)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotaNote', array($notaNote));

        return parent::setNotaNote($notaNote);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotaNote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotaNote', array());

        return parent::getNotaNote();
    }

}
